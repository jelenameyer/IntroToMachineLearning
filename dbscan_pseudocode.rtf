{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww29740\viewh17460\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Input: radius r, Number of points inside radius to be a Core point n\
\
\
data = [(1,2), (2,4), (5,3), (7,6), \'85]\
\
/**\
*\
*\
* radius: Radius around point to define close points of this point\
* corePointThreshold: Number of close points for a point to be a core point\
* return clusters as list of lists of tuples\
*/\
def calculateClusters(radius, corePointThreshold):\
	\
	# Calculate core points\
	corePoints = []\
	for point in data:\
		pointsAroundPoint = getNumberOfPointsAroundPoint(radius)\
		if len(pointsAroundPoint > corePointThreshold:\
			corePoints.add(point)\
\
	corePointClusters = getCorePointClusters(corePoints)\
\
	nonCorePoints = data.filter(point -> corePoints.contains(point))\
\
	clustersIncludingNonCorePoints = []\
\
	for corePointCluster in corePointClusters:\
		clusterIncludingNonCorePoints = []\
		for corePoint in corePointCluster:\
			clusterIncludingNonCorePoints.add(corePoint)\
			closeNonCorePoints = getClosePoints(corePoint, nonCorePoints, radius)\
			clusterIncludingNonCorePoints.add(closeNonCorePoints)\
		clustersIncludingNonCorePoints.add(clusterIncludingNonCorePoints)\
\
	return clustersIncludingNonCorePoints\
\
\'85\
	\
\
def getCorePointClusters(corePoints):\
	if len(corePoints) == 0:\
		return\
\
	# Just for immutability\
	corePointsCopy = copy(corePoints)\
\
	chosenCorePoint = getRandom(corePointsCopy)\
\
	# cluster includes all extracted core points\
	cluster = getCluster(chosenCorePoint, corePointsCopy)\
\
	corePointsCopy.remove(cluster)\
	return [cluster, unwrap(getCorePointsCluster(corePointsCopy))] -> unwrap ~ JS Spread operator\
\
\
def getCluster(corePoint, remainingCorePoints):\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 	# Just for immutability\
	corePointsCopy = copy(remainingCorePoints)\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
	cluster = []\
\
	for point in corePointsCopy:\
		if isClose(point, corePoint)\
			cluster.add(point)\
			corePointsCopy.remove(point)\
		}